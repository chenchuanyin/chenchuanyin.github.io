<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Silver Chan</title>
  
  <subtitle>传银的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenchuanyin.github.io/"/>
  <updated>2018-01-08T08:25:31.942Z</updated>
  <id>http://chenchuanyin.github.io/</id>
  
  <author>
    <name>chen chuanyin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>资料列表</title>
    <link href="http://chenchuanyin.github.io/2018/01/08/%E8%B5%84%E6%BA%90%E5%88%97%E8%A1%A8/"/>
    <id>http://chenchuanyin.github.io/2018/01/08/资源列表/</id>
    <published>2018-01-08T07:13:29.216Z</published>
    <updated>2018-01-08T08:25:31.942Z</updated>
    
    <content type="html"><![CDATA[<p>GitHub</p><ul><li>该hub存储了一些经典书籍，包括《深度学习》，《TCP/IP详解》。见<a href="https://www.github.com/mymmsc/books" target="_blank" rel="noopener">mymmsc/books</a></li><li>系统设计。见<a href="https://github.com/donnemartin/system-design-primer" target="_blank" rel="noopener">donnemartin/system-design-primer</a></li><li>C++入门指南，提供了一些使用技巧和使用规范。见<a href="https://github.com/isocpp/CppCoreGuidelines" target="_blank" rel="noopener">isocpp/CppCoreGuidelines</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;GitHub&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该hub存储了一些经典书籍，包括《深度学习》，《TCP/IP详解》。见&lt;a href=&quot;https://www.github.com/mymmsc/books&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mymms
      
    
    </summary>
    
      <category term="学习" scheme="http://chenchuanyin.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>golang目录结构及工具相关的一些工程经验总结</title>
    <link href="http://chenchuanyin.github.io/2017/11/16/golang%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E5%8F%8A%E5%B7%A5%E5%85%B7%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B7%A5%E7%A8%8B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    <id>http://chenchuanyin.github.io/2017/11/16/golang目录结构及工具相关的一些工程经验总结/</id>
    <published>2017-11-16T03:41:15.289Z</published>
    <updated>2018-01-15T05:02:40.607Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在开发golang组件的时候需要版本管理及组件管理，自己形成了一套模式框架，对于常规项目开发可以方便套用。</p></blockquote><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul><li>使用glide工具进行第三方版本包管理，不用依赖环境变量$GOPATH</li><li>使用makefile作为脚本工具，管理下载三方包，构建，打包</li><li>使用emacs+gocode来进行代码编写</li></ul><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── Makefile       :脚本</div><div class="line">├── bin            :组件产物输出目录，不用进行版本管理</div><div class="line">├── conf           :配置脚本</div><div class="line">├── glide.lock     :glide生成的文件</div><div class="line">├── glide.yaml     :glide生成的文件</div><div class="line">├── pkg            :gocode需要根据这个目录.a文件进行自动补全</div><div class="line">├── src            :源代码目录</div><div class="line">└── vendor         :glide下载的三方代码放置在这个目录，不用进行版本管理</div></pre></td></tr></table></figure><ul><li><p>Makefile的模板如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">PWD := <span class="variable">$(<span class="built_in">shell</span> pwd)</span></div><div class="line">GO := go</div><div class="line">GLIDE := glide</div><div class="line">GOCODE := gocode</div><div class="line">TARGET := IATOpenAPI</div><div class="line">VENDOR := $&#123;PWD&#125;/vendor</div><div class="line">GOPATH := $&#123;PWD&#125;/gopath</div><div class="line">OUT := $&#123;PWD&#125;/bin/</div><div class="line">OUT_TARGET := $&#123;PWD&#125;/bin/$&#123;TARGET&#125;</div><div class="line"></div><div class="line"><span class="comment">#批量工具</span></div><div class="line"><span class="section">all: deps build package</span></div><div class="line"></div><div class="line"><span class="comment">#生成glide.yaml文件</span></div><div class="line"><span class="section">init:</span></div><div class="line">rm -f glide.yaml</div><div class="line"><span class="keyword">export</span> GOPATH=$&#123;PWD&#125; &amp;&amp; $&#123;GLIDE&#125; init</div><div class="line"></div><div class="line"><span class="comment">#下载三方依赖包</span></div><div class="line"><span class="section">deps:</span></div><div class="line">rm  -rf $&#123;GOPATH&#125;/src</div><div class="line">mkdir -p $&#123;GOPATH&#125;/src</div><div class="line"><span class="keyword">export</span> GOPATH=$&#123;PWD&#125; &amp;&amp; $&#123;GLIDE&#125; install</div><div class="line">ln -s $&#123;VENDOR&#125;/* $&#123;GOPATH&#125;/src/</div><div class="line"></div><div class="line"><span class="comment">#构建</span></div><div class="line"><span class="section">build:</span></div><div class="line"><span class="keyword">export</span> GOPATH=$&#123;PWD&#125;:$&#123;GOPATH&#125; &amp;&amp; $&#123;GO&#125; build -o $&#123;OUT_TARGET&#125; $&#123;PWD&#125;/src/main.go</div><div class="line"></div><div class="line"><span class="comment">#清理</span></div><div class="line"><span class="section">clean:</span></div><div class="line">rm -fr $&#123;OUT&#125;/*</div><div class="line"></div><div class="line"><span class="comment">#打包</span></div><div class="line"><span class="section">package:</span></div><div class="line">cd $&#123;OUT&#125; &amp;&amp; tar cvzf mock.tar.gz $&#123;TARGET&#125; config.yaml</div><div class="line"></div><div class="line"><span class="comment">#gocode需要依赖环境变量$GOPATH来选中pkg，因此通过使用脚本来启动gocode</span></div><div class="line"><span class="section">gocode:</span></div><div class="line">$&#123;GOCODE&#125; close</div><div class="line">GOPATH=$&#123;PWD&#125; $&#123;GOCODE&#125; -s &amp;</div></pre></td></tr></table></figure></li><li><p>glide支持三方包管理，但国内经常访问不了golang.org等网站，需要使用<a href="https://chenchuanyin.github.io/2017/11/07/%E4%BF%AE%E5%A4%8DGO%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7GLIDE%E4%B8%8D%E8%83%BD%E8%AE%BF%E9%97%AEgolang.org%E7%9A%84%E6%9B%BF%E4%BB%A3%E6%96%B9%E6%A1%88/">镜像或代理</a>的方式访问。</p></li><li><p>emacs配置go编码环境<br>我是emacs重度使用者，coding的时候会优先选择emacs。 经过一段时间的探索，常规项目可以通过emacs下编写go代码，自动补全。</p></li></ul><ol><li>自动补全配置：spacemacs打开两个layer:go,autocomplete；gocode使用到了$GOPATH，需要根据项目目录来配置$GOPATH，配置启动方式我放在makefile脚本里。</li><li>代码跳转配置：go-guru使用到了环境变量$GOPATH，因此根据项目目录来配置$GOPATH，配置方式可以通过打开emacs后<code>M-x setenv &lt;RET&gt; GOPATH &lt;RET&gt; GO_DIRS</code>来设置。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在开发golang组件的时候需要版本管理及组件管理，自己形成了一套模式框架，对于常规项目开发可以方便套用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="学习" scheme="http://chenchuanyin.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="golang" scheme="http://chenchuanyin.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Makefile中重复创建目录提示错误的解决方案</title>
    <link href="http://chenchuanyin.github.io/2017/11/13/Makefile%E4%B8%AD%E5%88%9B%E5%BB%BA%E5%B7%B2%E5%AD%98%E5%9C%A8%E7%9B%AE%E5%BD%95%E6%8F%90%E7%A4%BA%E9%94%99%E8%AF%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://chenchuanyin.github.io/2017/11/13/Makefile中创建已存在目录提示错误的解决方案/</id>
    <published>2017-11-13T11:55:56.331Z</published>
    <updated>2017-11-13T11:57:14.874Z</updated>
    
    <content type="html"><![CDATA[<p>如题，我们经常需要在构建脚本Makefile中创建目录。例如下面一段脚本：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="section">deps:</span></div><div class="line">git submodule update --init --recursive</div><div class="line">mkdir -p out</div><div class="line"></div><div class="line"><span class="section">build:</span></div><div class="line">cd out &amp;&amp; cmake -DBUILD_TESTING=OFF ../ &amp;&amp; make -j8</div><div class="line"></div><div class="line"><span class="section">package: deps build</span></div><div class="line"></div><div class="line"><span class="section">clean:</span></div><div class="line">rm -rf out/*</div></pre></td></tr></table></figure></p><p>在<code>out</code>目录已存在后执行<code>make deps</code>，会出现以下错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">➜  cpp-demo git:(master) ✗ make deps</div><div class="line">git submodule update --init --recursive</div><div class="line">mkdir out</div><div class="line">mkdir: out: File exists</div><div class="line">make: *** [deps] Error 1</div><div class="line">➜  cpp-demo git:(master)</div></pre></td></tr></table></figure></p><p>为了消除这个错误提示，我们可以在<code>mkdir out</code>加入参数<code>-p</code>:<code>mkdir -p out</code>。<br>这样就不会提示错误了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如题，我们经常需要在构建脚本Makefile中创建目录。例如下面一段脚本：&lt;br&gt;&lt;figure class=&quot;highlight makefile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;
      
    
    </summary>
    
      <category term="学习" scheme="http://chenchuanyin.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="makefile" scheme="http://chenchuanyin.github.io/tags/makefile/"/>
    
  </entry>
  
  <entry>
    <title>pip国内下载失败超时等问题的解决方案</title>
    <link href="http://chenchuanyin.github.io/2017/11/10/pip%E4%B8%8B%E8%BD%BD%E8%B6%85%E6%97%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://chenchuanyin.github.io/2017/11/10/pip下载超时解决方案/</id>
    <published>2017-11-10T09:08:06.646Z</published>
    <updated>2017-11-13T11:47:38.973Z</updated>
    
    <content type="html"><![CDATA[<p>可以通过国内开源镜像来下载python的库,操作步骤如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir ~/.pip</div><div class="line">vim ~/.pip/pip.conf</div></pre></td></tr></table></figure></p><p>pip.conf内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[global]</div><div class="line">index-url = https://pypi.mirrors.ustc.edu.cn/simple</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;可以通过国内开源镜像来下载python的库,操作步骤如下：&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;
      
    
    </summary>
    
      <category term="学习" scheme="http://chenchuanyin.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python" scheme="http://chenchuanyin.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>交叉编译工具远程调试小结</title>
    <link href="http://chenchuanyin.github.io/2017/11/08/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <id>http://chenchuanyin.github.io/2017/11/08/交叉编译工具远程调试总结/</id>
    <published>2017-11-08T08:48:08.634Z</published>
    <updated>2017-11-21T07:55:44.631Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我们在开发ARM板子C/C++项目过程中，我们会需要查找定位BUG，一种方式是通过网络发送日志；另一种方式是通过调试方式，而很多板子没有执行GDB性能，<br>因此我们需要远程调试的方式来进行调试。现在总结下项目中使用的两种方式。</p></blockquote><h2 id="调试可执行程序"><a href="#调试可执行程序" class="headerlink" title="调试可执行程序"></a>调试可执行程序</h2><ol><li>环境准备：一台装有交叉编译工具链的机器A，一般是linux操作系统的机器；被调试程序的机器B上装有gdbserver</li><li>首先拷贝调试所需要的库及可执行程序到机器A上(【注】需要no-strip，带debug信息的库和可执行程序，可以通过<code>file</code>或<code>info shared</code>查看)</li><li><p>A机器准备gdb启动脚本.gdbinit，模板类似于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">set solid-search-path [调试库目录]</div><div class="line">file [需要调试可执行程序]</div><div class="line">target remote [调试可执行程序的机器ip]:[gdbserver暴露出来的端口号]</div></pre></td></tr></table></figure></li><li><p>B机器准备gdbserver启动脚本，模板类似于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gdbserver :[暴露出来的端口号] 可执行程序</div></pre></td></tr></table></figure></li><li><p>A机器gdb启动后，紧接着启动B机器脚本；这个时候A机器的gdb窗口进入可调试状态，我们可以设置断点或者查看线程栈信息，输入<code>c</code>程序继续执行，<code>Ctrl-c</code>进入打断状态</p></li></ol><h2 id="调试正在运行的进程"><a href="#调试正在运行的进程" class="headerlink" title="调试正在运行的进程"></a>调试正在运行的进程</h2><ol><li>调试环境、拷贝相关库及可执行程序、A机器准备的gdb脚本和调试可执行程序相同，只是通过attach的方式来调试</li><li>A机器gdb启动后，紧接着B机器执行如下命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gdbserver :[暴露出来的端口号] --attach [进程ID]</div></pre></td></tr></table></figure></li></ol><p>这个时候A机器的gdb窗口进入可调试状态。</p><p>这两种方式各有各的使用场景：<strong>调试可执行程序</strong>适合调试进程启动时候出现的BUG，<strong>调试正在运行的进程</strong>适合调试进程BUG已经出现的场景。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我们在开发ARM板子C/C++项目过程中，我们会需要查找定位BUG，一种方式是通过网络发送日志；另一种方式是通过调试方式，而很多板子没有执行GDB性能，&lt;br&gt;因此我们需要远程调试的方式来进行调试。现在总结下项目中使用的两种方式。&lt;/p&gt;
&lt;/bl
      
    
    </summary>
    
      <category term="学习" scheme="http://chenchuanyin.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="gdb" scheme="http://chenchuanyin.github.io/tags/gdb/"/>
    
  </entry>
  
  <entry>
    <title>git status中文显示不对问题修复</title>
    <link href="http://chenchuanyin.github.io/2017/11/07/git%20status%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA%E4%B8%8D%E5%87%BA%E6%9D%A5%E9%97%AE%E9%A2%98%E4%BF%AE%E5%A4%8D/"/>
    <id>http://chenchuanyin.github.io/2017/11/07/git status中文显示不出来问题修复/</id>
    <published>2017-11-07T09:12:17.185Z</published>
    <updated>2017-11-09T02:09:40.072Z</updated>
    
    <content type="html"><![CDATA[<p>如题，我的mac上git status显示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">➜  hexo git:(master) ✗ gst</div><div class="line">On branch master</div><div class="line">Changes not staged for commit:</div><div class="line">  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)</div><div class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</div><div class="line">  (commit or discard the untracked or modified content in submodules)</div><div class="line"></div><div class="line">modified:   _config.yml</div><div class="line">modified:   package-lock.json</div><div class="line">modified:   package.json</div><div class="line">deleted:    source/_posts/hello-world.md</div><div class="line">deleted:    &quot;source/_posts/\346\265\213\350\257\225\344\275\277\347\224\250-md.md&quot;</div><div class="line">deleted:    &quot;source/_posts/\347\254\254\344\272\214\344\270\252\346\265\213\350\257\225.md&quot;</div><div class="line">modified:   themes/maupassant (modified content)</div><div class="line">modified:   themes/next (untracked content)</div><div class="line"></div><div class="line">Untracked files:</div><div class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</div><div class="line"></div><div class="line">&quot;source/_posts/emacs\346\217\222\345\205\245\345\275\223\345\211\215\346\227\266\351\227\264\346\210\263.md&quot;</div><div class="line">&quot;source/_posts/\344\277\256\345\244\215GO\345\214\205\347\256\241\347\220\206\345\267\245\345\205\267GLIDE\344\270\215\350\203\275\350\256\277\351\227\256golang.org\347\232\204\346\233\277\344\273\243\346\226\271\346\241\210.md&quot;</div><div class="line">source/about/</div><div class="line"></div><div class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</div></pre></td></tr></table></figure></p><p>修复方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#不对0x80以上的字符进行quote，解决git status/commit时中文文件名乱码</div><div class="line">git config --global core.quotepath false</div></pre></td></tr></table></figure></p><p>再次git status就显示OK了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">➜  hexo git:(master) ✗ gst</div><div class="line">On branch master</div><div class="line">Changes not staged for commit:</div><div class="line">  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)</div><div class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</div><div class="line">  (commit or discard the untracked or modified content in submodules)</div><div class="line"></div><div class="line">modified:   _config.yml</div><div class="line">modified:   package-lock.json</div><div class="line">modified:   package.json</div><div class="line">deleted:    source/_posts/hello-world.md</div><div class="line">deleted:    source/_posts/测试使用-md.md</div><div class="line">deleted:    source/_posts/第二个测试.md</div><div class="line">modified:   themes/maupassant (modified content)</div><div class="line">modified:   themes/next (untracked content)</div><div class="line"></div><div class="line">Untracked files:</div><div class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</div><div class="line"></div><div class="line">source/_posts/emacs插入当前时间戳.md</div><div class="line">source/_posts/修复GO包管理工具GLIDE不能访问golang.org的替代方案.md</div><div class="line">source/about/</div><div class="line"></div><div class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如题，我的mac上git status显示&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;
      
    
    </summary>
    
      <category term="学习" scheme="http://chenchuanyin.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="git" scheme="http://chenchuanyin.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>emacs插入当前时间戳</title>
    <link href="http://chenchuanyin.github.io/2017/11/07/emacs%E6%8F%92%E5%85%A5%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%E6%88%B3/"/>
    <id>http://chenchuanyin.github.io/2017/11/07/emacs插入当前时间戳/</id>
    <published>2017-11-07T08:40:57.503Z</published>
    <updated>2017-11-09T02:09:33.499Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C-u M-! date</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;lin
      
    
    </summary>
    
      <category term="学习" scheme="http://chenchuanyin.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="emacs" scheme="http://chenchuanyin.github.io/tags/emacs/"/>
    
  </entry>
  
  <entry>
    <title>glide不能下载golang.org/x包的替代方案</title>
    <link href="http://chenchuanyin.github.io/2017/11/07/%E4%BF%AE%E5%A4%8DGO%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7GLIDE%E4%B8%8D%E8%83%BD%E8%AE%BF%E9%97%AEgolang.org%E7%9A%84%E6%9B%BF%E4%BB%A3%E6%96%B9%E6%A1%88/"/>
    <id>http://chenchuanyin.github.io/2017/11/07/修复GO包管理工具GLIDE不能访问golang.org的替代方案/</id>
    <published>2017-11-07T08:32:09.703Z</published>
    <updated>2017-11-14T06:36:50.607Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>glide是go的一个包管理工具，可以直接扫描工程管理import依赖。而golang.org/x下的包是viper、logrus等github开源包的依赖，国内又不能访问。一个好消息是golang.org/x在github上有镜像(github.com/golang)。下面是我尝试成功的替代方案。</p></blockquote><p>如果go工程中有golang.org/x/net的依赖，就可以在glide.yaml中加入以下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- package: golang.org/x/net</div><div class="line">  repo:    https://github.com:golang/net.git</div><div class="line">  vcs:     git</div></pre></td></tr></table></figure></p><p>这样<code>glide install/update</code>就可以从github.com镜像中下载相关库了。</p><p>另一种方式通过代理的方式配置go下载：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>127.0.0.1:9999是sock5代理地址</div><div class="line">alias go="http_proxy=socks5://127.0.0.1:9999 https_proxy=socks5://127.0.0.1:9999 go"</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;glide是go的一个包管理工具，可以直接扫描工程管理import依赖。而golang.org/x下的包是viper、logrus等github开源包的依赖，国内又不能访问。一个好消息是golang.org/x在github上有镜像(github.
      
    
    </summary>
    
      <category term="学习" scheme="http://chenchuanyin.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="golang" scheme="http://chenchuanyin.github.io/tags/golang/"/>
    
      <category term="glide" scheme="http://chenchuanyin.github.io/tags/glide/"/>
    
  </entry>
  
</feed>
