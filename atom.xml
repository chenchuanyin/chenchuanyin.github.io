<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Silver Chan</title>
  
  <subtitle>传银的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenchuanyin.github.io/"/>
  <updated>2017-11-08T09:42:58.527Z</updated>
  <id>http://chenchuanyin.github.io/</id>
  
  <author>
    <name>chen chuanyin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>交叉编译工具远程调试小结</title>
    <link href="http://chenchuanyin.github.io/2017/11/08/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <id>http://chenchuanyin.github.io/2017/11/08/交叉编译工具远程调试总结/</id>
    <published>2017-11-08T08:48:08.634Z</published>
    <updated>2017-11-08T09:42:58.527Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我们在开发ARM板子C/C++项目过程中，我们会需要查找定位BUG，一种方式是通过网络发送日志；另一种方式是通过调试方式，而很多板子没有执行GDB性能，<br>因此我们需要远程调试的方式来进行调试。现在总结下项目中使用的两种方式。</p></blockquote><h2 id="调试可执行程序"><a href="#调试可执行程序" class="headerlink" title="调试可执行程序"></a>调试可执行程序</h2><ol><li>环境准备：一台装有交叉编译工具链的机器A，一般是linux操作系统的机器；被调试程序的机器B上装有gdbserver</li><li>首先拷贝调试所需要的库及可执行程序到机器A上(【注】需要no-strip，带debug信息的库和可执行程序，可以通过<code>file</code>或<code>info shared</code>查看)</li><li><p>A机器准备gdb启动脚本.gdbinit，模板类似于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">set solid-search-path [调试库目录]</div><div class="line">file [需要调试可执行程序]</div><div class="line">target [调试可执行程序的机器ip]:[gdbserver暴露出来的端口号]</div></pre></td></tr></table></figure></li><li><p>B机器准备gdbserver启动脚本，模板类似于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gdbserver :[暴露出来的端口号] 可执行程序</div></pre></td></tr></table></figure></li><li><p>A机器gdb启动后，紧接着启动B机器脚本；这个时候A机器的gdb窗口进入可调试状态，我们可以设置断点或者查看线程栈信息，输入<code>c</code>程序继续执行，<code>Ctrl-c</code>进入打断状态</p></li></ol><h2 id="调试正在运行的进程"><a href="#调试正在运行的进程" class="headerlink" title="调试正在运行的进程"></a>调试正在运行的进程</h2><ol><li>调试环境、拷贝相关库及可执行程序、A机器准备的gdb脚本和调试可执行程序相同，只是通过attach的方式来调试</li><li>A机器gdb启动后，紧接着B机器执行如下命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gdbserver :[暴露出来的端口号] --attach [进程ID**</div></pre></td></tr></table></figure></li></ol><p>这个时候A机器的gdb窗口进入可调试状态。</p><p>这两种方式各有各的使用场景：<strong>调试可执行程序</strong>适合调试进程启动时候出现的BUG，<strong>调试正在运行的进程</strong>适合调试进程BUG已经出现的场景。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我们在开发ARM板子C/C++项目过程中，我们会需要查找定位BUG，一种方式是通过网络发送日志；另一种方式是通过调试方式，而很多板子没有执行GDB性能，&lt;br&gt;因此我们需要远程调试的方式来进行调试。现在总结下项目中使用的两种方式。&lt;/p&gt;
&lt;/bl
      
    
    </summary>
    
    
      <category term="gdb" scheme="http://chenchuanyin.github.io/tags/gdb/"/>
    
  </entry>
  
  <entry>
    <title>git status中文显示不对问题修复</title>
    <link href="http://chenchuanyin.github.io/2017/11/07/git%20status%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA%E4%B8%8D%E5%87%BA%E6%9D%A5%E9%97%AE%E9%A2%98%E4%BF%AE%E5%A4%8D/"/>
    <id>http://chenchuanyin.github.io/2017/11/07/git status中文显示不出来问题修复/</id>
    <published>2017-11-07T09:12:17.185Z</published>
    <updated>2017-11-07T09:13:56.015Z</updated>
    
    <content type="html"><![CDATA[<p>如题，我的mac上git status显示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">➜  hexo git:(master) ✗ gst</div><div class="line">On branch master</div><div class="line">Changes not staged for commit:</div><div class="line">  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)</div><div class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</div><div class="line">  (commit or discard the untracked or modified content in submodules)</div><div class="line"></div><div class="line">modified:   _config.yml</div><div class="line">modified:   package-lock.json</div><div class="line">modified:   package.json</div><div class="line">deleted:    source/_posts/hello-world.md</div><div class="line">deleted:    &quot;source/_posts/\346\265\213\350\257\225\344\275\277\347\224\250-md.md&quot;</div><div class="line">deleted:    &quot;source/_posts/\347\254\254\344\272\214\344\270\252\346\265\213\350\257\225.md&quot;</div><div class="line">modified:   themes/maupassant (modified content)</div><div class="line">modified:   themes/next (untracked content)</div><div class="line"></div><div class="line">Untracked files:</div><div class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</div><div class="line"></div><div class="line">&quot;source/_posts/emacs\346\217\222\345\205\245\345\275\223\345\211\215\346\227\266\351\227\264\346\210\263.md&quot;</div><div class="line">&quot;source/_posts/\344\277\256\345\244\215GO\345\214\205\347\256\241\347\220\206\345\267\245\345\205\267GLIDE\344\270\215\350\203\275\350\256\277\351\227\256golang.org\347\232\204\346\233\277\344\273\243\346\226\271\346\241\210.md&quot;</div><div class="line">source/about/</div><div class="line"></div><div class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</div></pre></td></tr></table></figure></p><p>修复方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#不对0x80以上的字符进行quote，解决git status/commit时中文文件名乱码</div><div class="line">git config --global core.quotepath false</div></pre></td></tr></table></figure></p><p>再次git status就显示OK了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">➜  hexo git:(master) ✗ gst</div><div class="line">On branch master</div><div class="line">Changes not staged for commit:</div><div class="line">  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)</div><div class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</div><div class="line">  (commit or discard the untracked or modified content in submodules)</div><div class="line"></div><div class="line">modified:   _config.yml</div><div class="line">modified:   package-lock.json</div><div class="line">modified:   package.json</div><div class="line">deleted:    source/_posts/hello-world.md</div><div class="line">deleted:    source/_posts/测试使用-md.md</div><div class="line">deleted:    source/_posts/第二个测试.md</div><div class="line">modified:   themes/maupassant (modified content)</div><div class="line">modified:   themes/next (untracked content)</div><div class="line"></div><div class="line">Untracked files:</div><div class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</div><div class="line"></div><div class="line">source/_posts/emacs插入当前时间戳.md</div><div class="line">source/_posts/修复GO包管理工具GLIDE不能访问golang.org的替代方案.md</div><div class="line">source/about/</div><div class="line"></div><div class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如题，我的mac上git status显示&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;
      
    
    </summary>
    
    
      <category term="git" scheme="http://chenchuanyin.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>emacs插入当前时间戳</title>
    <link href="http://chenchuanyin.github.io/2017/11/07/emacs%E6%8F%92%E5%85%A5%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%E6%88%B3/"/>
    <id>http://chenchuanyin.github.io/2017/11/07/emacs插入当前时间戳/</id>
    <published>2017-11-07T08:40:57.503Z</published>
    <updated>2017-11-07T08:40:57.503Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C-u M-! date</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;lin
      
    
    </summary>
    
    
      <category term="emacs" scheme="http://chenchuanyin.github.io/tags/emacs/"/>
    
  </entry>
  
  <entry>
    <title>glide不能下载golang.org/x包的替代方案</title>
    <link href="http://chenchuanyin.github.io/2017/11/07/%E4%BF%AE%E5%A4%8DGO%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7GLIDE%E4%B8%8D%E8%83%BD%E8%AE%BF%E9%97%AEgolang.org%E7%9A%84%E6%9B%BF%E4%BB%A3%E6%96%B9%E6%A1%88/"/>
    <id>http://chenchuanyin.github.io/2017/11/07/修复GO包管理工具GLIDE不能访问golang.org的替代方案/</id>
    <published>2017-11-07T08:32:09.703Z</published>
    <updated>2017-11-08T08:34:34.853Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>glide是go的一个包管理工具，可以直接扫描工程管理import依赖。而golang.org/x下的包是viper、logrus等github开源包的依赖，国内又不能访问。一个好消息是golang.org/x在github上有镜像(github.com/golang)。下面是我尝试成功的替代方案。</p></blockquote><p>如果go工程中有golang.org/x/net的依赖，就可以在glide.yaml中加入以下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- package: golang.org/x/net</div><div class="line">  repo:    https://github.com:golang/net.git</div><div class="line">  vcs:     git</div></pre></td></tr></table></figure></p><p>这样<code>glide install/update</code>就可以从github.com镜像中下载相关库了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;glide是go的一个包管理工具，可以直接扫描工程管理import依赖。而golang.org/x下的包是viper、logrus等github开源包的依赖，国内又不能访问。一个好消息是golang.org/x在github上有镜像(github.
      
    
    </summary>
    
    
      <category term="golang" scheme="http://chenchuanyin.github.io/tags/golang/"/>
    
      <category term="glide" scheme="http://chenchuanyin.github.io/tags/glide/"/>
    
  </entry>
  
</feed>
